/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/challenge/{challengeId}': {
    put: operations['updateChallenge'];
  };
  '/image/presigned': {
    /** presigned url을 발급받는 API */
    post: operations['createPresigned'];
  };
  '/challenge': {
    post: operations['createChallenge'];
  };
  '/challenge/{challengeRoomId}/create': {
    /** 챌린지 지출을 기록하는 API */
    post: operations['createRecord'];
  };
  '/auth/refresh': {
    post: operations['refreshToken'];
  };
  '/auth/kakao': {
    /**
     * KAKAO 소셜로그인 API
     * @description 사용자 인증 이후, access[body]/refresh[cookie] token을 발급합니다.
     */
    post: operations['authKakao'];
  };
  '/challenge/{recordId}': {
    /** 챌린지 지출을 삭제하는 API */
    delete: operations['deleteRecord'];
    /** 챌린지 지출을 수정하는 API */
    patch: operations['updateRecord'];
  };
  '/challenge/{challengeRoomId}/{recordId}': {
    /**
     * 챌린지 지출 상세보기 API
     * @description 기록에 대한 본문 및 댓글들을 보여줍니다.
     */
    get: operations['getRecord'];
  };
  '/challenge/{challengeRoomId}/proceeding/info': {
    /**
     * 챌린지 진행 정보 API
     * @description 챌린지의 진행 정보(목표 지출액, 현재 지출액 등)를 가져옵니다.
     */
    get: operations['getChallengeProceedingInfo'];
  };
  '/challenge/{challengeRoomId}/feed': {
    /**
     * 챌린지 방 피드 API
     * @description 챌린지 방에 있는 기록들을 20개씩 가져옵니다.
     */
    get: operations['getChallengeFeed'];
  };
  '/challenge/my-room/feed': {
    /**
     * 내 방 피드 API
     * @description 내 방에 있는 기록들을 20개씩 가져옵니다.
     */
    get: operations['getMyRoomFeed'];
  };
  '/challenge/my-list': {
    /**
     * 참여중인 챌린지 API
     * @description 참여중인 챌린지 방들의 정보를 가져옵니다.
     */
    get: operations['getMyChallengeList'];
  };
  '/': {
    get: operations['home'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CommonResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
    };
    UpdateChallengeRequest: {
      categories?: string[];
      title?: string;
      /** Format: int32 */
      price?: number;
      imgUrl?: string;
      keywords?: string[];
      /** Format: int32 */
      availableCount?: number;
      rules?: string[];
      /** Format: int32 */
      period?: number;
      /** Format: date */
      startAt?: string;
      /** Format: date */
      endAt?: string;
      /** Format: int64 */
      challengeId?: number;
    };
    IssuePresignedUrlRequest: {
      /**
       * @description JPG, PNG, JPEG
       * @enum {string}
       */
      imageFileExtension: 'JPEG' | 'JPG' | 'PNG';
      /**
       * @description RECODE, PROFILE, CHALLENGE
       * @enum {string}
       */
      type: 'RECORD' | 'PROFILE' | 'CHALLENGE';
    };
    IssuePresignedUrlResponse: {
      presignedUrl?: string;
      key?: string;
    };
    ResponseIssuePresignedUrlResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['IssuePresignedUrlResponse'];
    };
    Challenge: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      challengeCategories?: components['schemas']['ChallengeCategories'];
      title?: string;
      /** Format: int32 */
      price?: number;
      imgUrl?: string;
      challengeKeywords?: components['schemas']['ChallengeKeywords'];
      /** Format: int32 */
      availableCount?: number;
      createdBy?: string;
      userChallenges?: components['schemas']['UserChallenge'][];
      challengeRules?: components['schemas']['ChallengeRule'][];
      duration?: components['schemas']['Duration'];
    };
    ChallengeCategories: Record<string, never>;
    ChallengeKeywords: {
      keywords?: components['schemas']['Keyword'][];
      keywordNames?: string[];
    };
    ChallengeRule: {
      /** Format: int64 */
      id?: number;
      content?: string;
      challenge?: components['schemas']['Challenge'];
    };
    CreateChallengeRequest: {
      category: string[];
      title: string;
      /** Format: int32 */
      price: number;
      imageUrl?: string;
      keywords: string[];
      /** Format: int32 */
      availableCount: number;
      challengeRule?: components['schemas']['ChallengeRule'][];
      /** Format: int32 */
      period: number;
      /** Format: date */
      startAt: string;
      /** Format: date */
      endAt: string;
    };
    Duration: {
      /** Format: int32 */
      period?: number;
      /** Format: date */
      startAt?: string;
      /** Format: date */
      endAt?: string;
    };
    Keyword: {
      /** Format: int64 */
      id?: number;
      keyword?: string;
    };
    Profile: {
      name?: string;
      email?: string;
      imgUrl?: string;
    };
    Social: {
      id?: string;
      /** @enum {string} */
      platform?: 'KAKAO' | 'GOOGLE' | 'APPLE';
    };
    User: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      profile?: components['schemas']['Profile'];
      social?: components['schemas']['Social'];
      /** @enum {string} */
      role?: 'USER' | 'GUEST';
      userChallenges?: components['schemas']['UserChallenge'][];
    };
    UserChallenge: {
      /** Format: int64 */
      id?: number;
      user?: components['schemas']['User'];
      challenge?: components['schemas']['Challenge'];
      nickname?: string;
      /** Format: int32 */
      currentCharge?: number;
    };
    CreateRecordRequest: {
      /** Format: int32 */
      price: number;
      /** @description 지출 명 */
      title: string;
      /** @description 지출 내용 */
      content: string;
      /** @description 사진 링크 */
      imgUrl?: string | null;
      /**
       * Format: int32
       * @description 지출 평가, [1,2,3,4] 중에서 선택 가능합니다.
       */
      evaluation: number;
    };
    CreateRecordResponse: {
      /** Format: int64 */
      id?: number;
      title?: string;
      content?: string;
      imgUrl?: string;
      /** Format: int32 */
      evaluation?: number;
      user?: components['schemas']['User'];
    };
    ResponseCreateRecordResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['CreateRecordResponse'];
    };
    KakaoAuthRequest: {
      idToken: string;
      accessToken: string;
    };
    KakaoAuthResponse: {
      accessToken?: string;
    };
    ResponseKakaoAuthResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['KakaoAuthResponse'];
    };
    ResponseCustomExceptionStatus: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      /** @enum {string} */
      result?:
        | 'SUCCESS'
        | 'BAD_REQUEST'
        | 'TOO_MANY_REQUEST'
        | 'INTERNAL_SERVER_ERROR'
        | 'REQUEST_ERROR'
        | 'EMPTY_JWT'
        | 'INVALID_JWT'
        | 'INVALID_REFRESH_TOKEN'
        | 'NOT_AUTHENTICATED_ACCOUNT'
        | 'INVALID_KEY'
        | 'ACCOUNT_NOT_FOUND'
        | 'ACCOUNT_NOT_VALID'
        | 'POST_USERS_EMPTY_NAME'
        | 'POST_USERS_INVALID_NAME'
        | 'ACCOUNT_ALREADY_EXIST'
        | 'ACCOUNT_ACCESS_DENIED'
        | 'RESPONSE_ERROR'
        | 'DATABASE_ERROR'
        | 'SERVER_ERROR'
        | 'FILE_CONVERT_FAIL'
        | 'CHALLENGE_NOT_FOUND'
        | 'CHALLENGE_IS_FULL'
        | 'UNPARTICIPATED_CHALLENGE_USER'
        | 'CHALLENGE_NOT_BELONG_TO_USER'
        | 'FEED_NOT_FOUND'
        | 'COMMENT_NOT_FOUND'
        | 'RECORD_NOT_FOUND'
        | 'RECORD_EVALUATION_NOT_VALID'
        | 'INVALID_RECORD_USER'
        | 'CATEGORY_NOT_FOUND'
        | 'CANNOT_ADD_CATEGORY'
        | 'INVALID_KEYWORD_FORMAT'
        | 'CANNOT_ADD_KEYWORD'
        | 'ALL_KEYWORD_LENGTH_IS_OVER';
    };
    ChallengeRecord: {
      /**
       * Format: int64
       * @example 27
       */
      recordId?: number;
      /**
       * @description 본인 기록인지
       * @example true
       */
      isMine?: boolean;
      /** @example 사용자 닉네임 */
      nickname?: string;
      /** @example 사용자 이미지 URL */
      userImgUrl?: string;
      /**
       * Format: date-time
       * @description 기록 작성일
       */
      recordDate?: string;
      /** @example 기록 이미지 URL */
      recordImgUrl?: string;
      /** @example 지출 내역명 */
      title?: string;
      /** @example 기록 내용 */
      content?: string;
      /**
       * Format: int32
       * @description 가격
       * @example 5000
       */
      price?: number;
    };
    GetRecordResponse: {
      challengeRecord?: components['schemas']['ChallengeRecord'];
      recordCommentList?: components['schemas']['RecordComment'][];
    };
    RecordComment: {
      /**
       * Format: int64
       * @example 27
       */
      commentId?: number;
      /**
       * @description 본인 댓글인지
       * @example true
       */
      isMine?: boolean;
      /** @example 댓글 작성자 닉네임 */
      nickname?: string;
      /** @example 댓글 작성자 이미지 URL */
      imgUrl?: string;
      /** @example 댓글 내용 */
      content?: string;
      /**
       * Format: date-time
       * @description 댓글 작성일
       */
      commentDate?: string;
    };
    ResponseGetRecordResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['GetRecordResponse'];
    };
    ChallengeProgress: {
      /**
       * Format: int32
       * @description 목표 지출액
       * @example 100000
       */
      goalCharge?: number;
      /**
       * Format: int32
       * @description 현재 지출액
       * @example 65000
       */
      currentCharge?: number;
      /**
       * Format: int32
       * @description 퍼센트(%)
       * @example 65
       */
      percent?: number;
      /**
       * Format: int32
       * @description 남은 기간
       * @example 11
       */
      dueDay?: number;
    };
    GetChallengeProceedingInfoResponse: {
      challengeProgress?: components['schemas']['ChallengeProgress'];
    };
    ResponseGetChallengeProceedingInfoResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['GetChallengeProceedingInfoResponse'];
    };
    Feed: {
      /**
       * Format: int64
       * @description 지출 기록 ID
       * @example 27
       */
      recordId?: number;
      /**
       * @description 본인 기록인지
       * @example true
       */
      isMine?: boolean;
      /**
       * Format: int32
       * @description 현재 지출액
       * @example 78000
       */
      currentCharge?: number;
      /** @example 유저 이미지 URL */
      userImgUrl?: string;
      /** @example 사용자 닉네임 */
      nickname?: string;
      /** @example 기록 이미지 URL */
      recordImgUrl?: string;
      /**
       * Format: int32
       * @description 가격
       * @example 5000
       */
      price?: number;
      /** @example 기록 타이틀 */
      title?: string;
      /** @example 기록 내용 */
      content?: string;
      /**
       * Format: date-time
       * @description 기록 작성일
       */
      recordDate?: string;
    };
    GetChallengeFeedResponse: {
      /**
       * Format: int32
       * @example 12
       */
      totalPage?: number;
      /**
       * Format: int32
       * @example 5
       */
      currentPage?: number;
      /**
       * Format: int32
       * @description 페이지 당 기록수
       * @example 20
       */
      perPage?: number;
      feedList?: components['schemas']['Feed'][];
    };
    ResponseGetChallengeFeedResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['GetChallengeFeedResponse'];
    };
    GetMyRoomFeedResponse: {
      /**
       * Format: int32
       * @description 총 페이지
       * @example 12
       */
      totalPage?: number;
      /**
       * Format: int32
       * @description 현재 페이지
       * @example 5
       */
      currentPage?: number;
      /**
       * Format: int32
       * @description 페이지 당 기록수
       * @example 20
       */
      perPage?: number;
      myFeedList?: components['schemas']['MyFeed'][];
    };
    MyFeed: {
      /**
       * Format: int64
       * @example 27
       */
      recordId?: number;
      /** @example 사용자 닉네임 */
      nickname?: string;
      /** @example 유저 이미지 URL */
      userImgUrl?: string;
      /**
       * Format: int32
       * @description 가격
       * @example 5000
       */
      price?: number;
      /** @example 기록 타이틀 */
      title?: string;
      /** @example 기록 내용 */
      content?: string;
      /** @example 챌린지 이미지 URL */
      challengeImgUrl?: string;
      /** @example 챌린지 타이틀 */
      challengeTitle?: string;
      /**
       * Format: date-time
       * @description 기록 작성일
       */
      recordDate?: string;
    };
    ResponseGetMyRoomFeedResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['GetMyRoomFeedResponse'];
    };
    GetMyChallengeListResponse: {
      participatedChallengeList?: components['schemas']['ParticipatedChallenge'][];
    };
    ParticipatedChallenge: {
      /**
       * Format: int64
       * @description 챌린지 방 ID
       * @example 13
       */
      challengeRoomId?: number;
      /**
       * @description 참여중인 챌린지 타이틀
       * @example 배달 10만원 이하로 쓰기
       */
      title?: string;
      /**
       * @description 챌린지 대표 이미지
       * @example 이미지 URL
       */
      imgUrl?: string;
    };
    ResponseGetMyChallengeListResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['GetMyChallengeListResponse'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  updateChallenge: {
    parameters: {
      path: {
        challengeId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateChallengeRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  /** presigned url을 발급받는 API */
  createPresigned: {
    requestBody: {
      content: {
        'application/json': components['schemas']['IssuePresignedUrlRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseIssuePresignedUrlResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  createChallenge: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateChallengeRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  /** 챌린지 지출을 기록하는 API */
  createRecord: {
    parameters: {
      path: {
        challengeRoomId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecordRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseCreateRecordResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  refreshToken: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  /**
   * KAKAO 소셜로그인 API
   * @description 사용자 인증 이후, access[body]/refresh[cookie] token을 발급합니다.
   */
  authKakao: {
    requestBody: {
      content: {
        'application/json': components['schemas']['KakaoAuthRequest'];
      };
    };
    responses: {
      /** @description Set-Cookie에 RefreshToken={토큰값} 형태로 RefreshToken이 들어있습니다. */
      200: {
        headers: {
          /** @description RefreshToken={value} */
          'Set-Cookie'?: unknown;
        };
        content: {
          '*/*': components['schemas']['ResponseKakaoAuthResponse'];
        };
      };
      /** @description 유효하지 않은 토큰으로 요청하거나, 다른 플랫폼에 해당 이메일로 가입된 계정이 있을 경우 */
      400: {
        content: {};
      };
    };
  };
  /** 챌린지 지출을 삭제하는 API */
  deleteRecord: {
    parameters: {
      path: {
        recordId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseCustomExceptionStatus'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  /** 챌린지 지출을 수정하는 API */
  updateRecord: {
    parameters: {
      path: {
        recordId: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecordRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseCustomExceptionStatus'];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
  /**
   * 챌린지 지출 상세보기 API
   * @description 기록에 대한 본문 및 댓글들을 보여줍니다.
   */
  getRecord: {
    parameters: {
      path: {
        challengeRoomId: number;
        recordId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseGetRecordResponse'];
        };
      };
      /** @description 잘못된 요청값을 전달한 경우 */
      400: {
        content: {};
      };
    };
  };
  /**
   * 챌린지 진행 정보 API
   * @description 챌린지의 진행 정보(목표 지출액, 현재 지출액 등)를 가져옵니다.
   */
  getChallengeProceedingInfo: {
    parameters: {
      path: {
        challengeRoomId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseGetChallengeProceedingInfoResponse'];
        };
      };
      /** @description 잘못된 요청값을 전달한 경우 */
      400: {
        content: {};
      };
    };
  };
  /**
   * 챌린지 방 피드 API
   * @description 챌린지 방에 있는 기록들을 20개씩 가져옵니다.
   */
  getChallengeFeed: {
    parameters: {
      query: {
        page: number;
      };
      path: {
        challengeRoomId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseGetChallengeFeedResponse'];
        };
      };
      /** @description 잘못된 요청값을 전달한 경우 */
      400: {
        content: {};
      };
    };
  };
  /**
   * 내 방 피드 API
   * @description 내 방에 있는 기록들을 20개씩 가져옵니다.
   */
  getMyRoomFeed: {
    parameters: {
      query: {
        page: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseGetMyRoomFeedResponse'];
        };
      };
      /** @description 잘못된 요청값을 전달한 경우 */
      400: {
        content: {};
      };
    };
  };
  /**
   * 참여중인 챌린지 API
   * @description 참여중인 챌린지 방들의 정보를 가져옵니다.
   */
  getMyChallengeList: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['ResponseGetMyChallengeListResponse'];
        };
      };
      /** @description 잘못된 요청값을 전달한 경우 */
      400: {
        content: {};
      };
    };
  };
  home: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          '*/*': components['schemas']['CommonResponse'];
        };
      };
    };
  };
}
